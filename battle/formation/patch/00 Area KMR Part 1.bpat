#import enemy/EB_LittleHorn.bpat
#import enemy/EC_Slime.bpat

#new:Actor $22_DryBones {
    % stats
    [Index]        47b 
    [Level]        30`b 
    [MaxHP]         1`b 
    [Coins]         1`b 
    [Flags]       00000000 
    [StatusTable] $StatusTable_8021CABC_22 
    % ai
    [PartsCount]    3`s 
    [PartsTable]  $PartsTable_8021CC14_22 
    [Script]      $Script_Init_8021CC84_22 
    % move effectiveness
    [Escape]       50`b 
    [Item]         10`b 
    [AirLift]      75`b 
    [Hurricane]    70`b % Bow's "Spook" as well
    [UpAndAway]    95`b 
    [PowerBounce]  95`b 
    [SpinSmash]     0`b % weight (0-4)
    % ui positions
    [Size]         28`b  32`b % width height
    [HealthBar]     0`b   0`b % dx dy
    [StatusTurn]  -15`b  15`b % dx dy
    [StatusIcon]    3`b  27`b % dx dy
    }
    
    #new:IdleAnimations $IdleAnimations_8021CA20_22 {
    .Status:Normal    00530002
    .Status:Stone     00530000
    .Status:Sleep     0053000E
    .Status:Poison    00530002
    .Status:Stop      00530000
    .Status:Static    00530002
    .Status:Paralyze  00530000
    .Status:Dizzy     0053000D
    .Status:Fear      0053000D
    .Status:End
    }
    
    #new:IdleAnimations $IdleAnimations_8021CA6C_22 {
    .Status:Normal    0053000E
    .Status:End
    }
    
    #new:IdleAnimations $IdleAnimations_8021CA78_22 {
    .Status:Normal    0053000F
    .Status:End
    }

    #new:IdleAnimations $IdleAnimations_Skull {
      .Status:Normal    00530013
      .Status:End
      }
    
    #new:DefenseTable $DefenseTable_8021CA84_22 {
    .Element:Normal 00000063
    .Element:End
    }
    
    #new:DefenseTable $DefenseTable_8021CAA0_22 {
    .Element:Normal 00000000
    .Element:End
    }
    
    #new:StatusTable $StatusTable_8021CABC_22 {
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep       100`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy       0`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze   50`
    .Status:Shrink     60`
    .Status:Stop       85`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      6`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod      -1`
    .Status:End
    }
    
    #new:StatusTable $StatusTable_8021CB68_22 {
    .Status:Normal      0`
    .Status:Default     0`
    .Status:Sleep       0`
    .Status:Poison      0`
    .Status:Frozen      0`
    .Status:Dizzy       0`
    .Status:Fear        0`
    .Status:Static      0`
    .Status:Paralyze    0`
    .Status:Shrink      0`
    .Status:Stop        0`
    .Status:DefaultTurnMod    0`
    .Status:SleepTurnMod      0`
    .Status:PoisonTurnMod     0`
    .Status:FrozenTurnMod     0`
    .Status:DizzyTurnMod      0`
    .Status:FearTurnMod       0`
    .Status:StaticTurnMod     0`
    .Status:ParalyzeTurnMod   0`
    .Status:ShrinkTurnMod     0`
    .Status:StopTurnMod       0`
    .Status:End
    }
    
    #new:PartsTable $PartsTable_8021CC14_22 {
    00800000 01000000 F81E00FF $IdleAnimations_8021CA20_22 $DefenseTable_8021CA84_22 00000000 00000000 FFF60000 00000000 
    00120001 02000000 000000FF $IdleAnimations_8021CA78_22 $DefenseTable_8021CA84_22 00000000 00000000 00000000 00000000 
    00120001 03000000 000000FF $IdleAnimations_Skull $DefenseTable_8021CA84_22 00000000 00000000 00000000 00000000 
    }
    
    #new:Script $Script_Init_8021CC84_22 {
        0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_8021DB48_22 )
       14:  Call  BindIdle      ( .Actor:Self $Script_Idle_8021CF2C_22 )
       28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8021D404_22 )
       3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8021CCFC_22 )
       50:  Call  SetActorVar   ( .Actor:Self 00000008 00000000 )
       68:  Return
       70:  End
    }
    
    #new:Script $Script_NextTurn_8021CCFC_22 {
        0:  Call  GetOriginalActorType  ( .Actor:Self *VarA )
       14:  Call  EnemyCreateTargetList ( 00008002 )
       24:  Call  InitTargetIterator ( )
       30:  Label  0
       3C:  Call  GetOwnerTarget        ( *Var0 *Var1 )
       50:  Call  GetOriginalActorType  ( *Var0 *Var2 )
       64:  If  *Var2  !=  *VarA 
       74:  	Call  GetActorHP    ( *Var0 *Var3 )
       88:  	If  *Var3  !=  00000000 
       98:  		Return
       A0:  	EndIf
       A8:  EndIf
       B0:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
       C4:  If  *Var0  !=  FFFFFFFF 
       D4:  	Goto  0
       E0:  EndIf
       E8:  Call  EnemyCreateTargetList ( 00008002 )
       F8:  Call  InitTargetIterator ( )
      104:  Label  1
      110:  Call  GetOwnerTarget        ( *Var0 *Var1 )
      124:  Call  GetActorVar   ( *Var0 00000008 *Var3 )
      13C:  If  *Var3  !=  00000001 
      14C:  	Return
      154:  EndIf
      15C:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
      170:  If  *Var0  !=  FFFFFFFF 
      180:  	Goto  1
      18C:  EndIf
      194:  Call  EnemyCreateTargetList ( 00008002 )
      1A4:  Call  InitTargetIterator ( )
      1B0:  Label  2
      1BC:  Call  GetOwnerTarget    ( *Var0 *Var1 )
      1D0:  Call  SetActorFlagBits  ( *Var0 00600000 .True )
      1E8:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
      1FC:  If  *Var0  !=  FFFFFFFF 
      20C:  	Goto  2
      218:  EndIf
      220:  Return
      228:  End
    }
    
    #new:Script $Script_Idle_8021CF2C_22 {
        0:  Label  0
        
        C:  Call  GetActorVar       ( .Actor:Self 00000008 *Var0 )
       24:  Call  GetStatusFlags    ( .Actor:Self *Var1 )
       38:  Switch  *Var0 
       44:  	Case  ==  00000000 
       50:  		Switch  *Var1 
       5C:  			Case  &  ~Flags:StatusFlags:Sleep % 1000
       68:  				Call  SetTargetOffset   ( .Actor:Self 00000001  -6`  24` )
       84:  				Call  8027D4C8  ( FFFFFF81 00000001 00000001 FFFFFFFB )
       A0:  			Default
       A8:  				Call  SetTargetOffset   ( .Actor:Self 00000001  -8`  30` )
       C4:  				Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF6 )
       E0:  		EndSwitch
       E8:  	Case  ==  00000001 
       F4:  		Switch  *Var1 
      100:  			Case  &  ~Flags:StatusFlags:Sleep % 1000
      10C:  				Call  SetTargetOffset   ( .Actor:Self 00000001  -1`  10` )
      128:  				Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
      144:  			Default
      14C:  				Call  SetTargetOffset   ( .Actor:Self 00000001  -1`  10` )
      168:  				Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
      184:  		EndSwitch
      18C:  EndSwitch
      
      194:  Wait  1`
      1A0:  Goto  0
      1AC:  Return
      1B4:  End
    }
    
    #new:Script $Script_8021D0E8_22 {
        0:  Call  PlaySoundAtActor  ( .Actor:Self 000002D2 )
       14:  Call  SetAnimation      ( .Actor:Self 00000001 00530008 )
       2C:  Wait  20`
       38:  Call  SetActorVar       ( .Actor:Self 00000008 00000001 )
       50:  Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021CA6C_22 )
       68:  Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021CAA0_22 )
       80:  Call  SetStatusTable    ( .Actor:Self $StatusTable_8021CB68_22 )
       94:  Call  ClearStatusEffects    ( .Actor:Self )
       A4:  Call  SetTargetOffset   ( .Actor:Self 00000001  -1`  10` )
       C0:  Call  8027D4C8  ( FFFFFF81 00000001 00000000 00000000 )
       DC:  Call  RandInt   ( 00000000 *Var0 )
       F0:  Add   *Var0  00000002 
      100:  Call  SetActorVar       ( .Actor:Self 00000000 *Var0 )
      118:  Call  GetOriginalActorType  ( .Actor:Self *VarA )
      12C:  Call  EnemyCreateTargetList ( 00008002 )
      13C:  Call  InitTargetIterator ( )
      148:  Label  0
      154:  Call  GetOwnerTarget    ( *Var0 *Var1 )
      168:  Call  GetOriginalActorType  ( *Var0 *Var2 )
      17C:  If  *Var2  !=  *VarA 
      18C:  	Return
      194:  EndIf
      19C:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
      1B0:  If  *Var0  !=  FFFFFFFF 
      1C0:  	Goto  0
      1CC:  EndIf
      1D4:  Call  EnemyCreateTargetList ( 00008002 )
      1E4:  Call  InitTargetIterator ( )
      1F0:  Label  1
      1FC:  Call  GetOwnerTarget        ( *Var0 *Var1 )
      210:  Call  GetActorVar   ( *Var0 00000008 *Var3 )
      228:  If  *Var3  !=  00000001 
      238:  	Return
      240:  EndIf
      248:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
      25C:  If  *Var0  !=  FFFFFFFF 
      26C:  	Goto  1
      278:  EndIf
      280:  Call  EnemyCreateTargetList ( 00008002 )
      290:  Call  InitTargetIterator ( )
      29C:  Label  2
      2A8:  Call  GetOwnerTarget    ( *Var0 *Var1 )
      2BC:  Call  SetActorFlagBits  ( *Var0 00600000 .True )
      2D4:  Call  ChooseNextTarget  ( .Iter:Next *Var0 )
      2E8:  If  *Var0  !=  FFFFFFFF 
      2F8:  	Goto  2
      304:  EndIf
      30C:  Return
      314:  End
    }
    
    #new:Script $Script_HandleEvent_8021D404_22 {
        0:  Call  UseIdleAnimation  ( .Actor:Self .False )
       14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
       28:  Call  GetLastEvent      ( .Actor:Self *Var0 )
       3C:  Switch  *Var0 
       48:  	Case  ==  .Event:HitCombo % 9
       54:  		SetConst  *Var0  00000001 
       64:  		SetConst  *Var1  00530007 
       74:  		ExecWait  DoNormalHit 
       80:  	Case  ==  .Event:Hit % A
       8C:  		SetConst  *Var0  00000001 
       9C:  		SetConst  *Var1  00530007 
       AC:  		ExecWait  DoNormalHit 
       B8:  	Case  ==  .Event:BurnHit % E
       C4:  		Call  SetPartEventBits  ( .Actor:Self 00000001 00000200 .True )
       E0:  		SetConst  *Var0  00000001 
       F0:  		SetConst  *Var1  0053000B 
      100:  		SetConst  *Var2  0053000C 
      110:  		ExecWait  DoBurnHit 
      11C:  		Call  SetPartEventBits  ( .Actor:Self 00000001 00000200 .False )
      138:  	Case  ==  .Event:BurnDeath % 24
      144:  		SetConst  *Var0  00000001 
      154:  		SetConst  *Var1  0053000B 
      164:  		SetConst  *Var2  0053000C 
      174:  		ExecWait  DoBurnHit 
      180:  		SetConst  *Var0  00000001 
      190:  		SetConst  *Var1  0053000C 
      1A0:  		ExecWait  DoDeath 
      1AC:  		Return
      1B4:  	Case  ==  .Event:SpinSmashHit % B
      1C0:  		SetConst  *Var0  00000001 
      1D0:  		SetConst  *Var1  00530007 
      1E0:  		ExecWait  DoSpinSmashHit 
      1EC:  	Case  ==  .Event:SpinSmashDeath % 21
      1F8:  		SetConst  *Var0  00000001 
      208:  		SetConst  *Var1  00530007 
      218:  		ExecWait  DoSpinSmashHit 
      224:  		ExecWait  DoDeath 
      230:  	CaseOR  ==  00000017 % 17
      23C:  	CaseOR  ==  .Event:Immune % 19
      248:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
      260:  		If  *Var0  ==  00000000 
      270:  			SetConst  *Var0  00000001 
      280:  			SetConst  *Var1  00530002 
      290:  			ExecWait  DoImmune 
      29C:  		Else
      2A4:  			SetConst  *Var0  00000001 
      2B4:  			SetConst  *Var1  00530001 
      2C4:  			ExecWait  DoImmune 
      2D0:  		EndIf
                    Call GetActorVar (.Actor:Self 00000002 *Var0 )
                    If *Var0 == 00000000
                        Call SetActorVar ( .Actor:Self 00000002 00000001)
                    EndIf
      2D8:  	EndCaseGroup
      2E0:  	Case  ==  .Event:Death % 20
      2EC:  		SetConst  *Var0  00000001 
      2FC:  		SetConst  *Var1  00530007 
      30C:  		ExecWait  DoNormalHit 
      318:  		Wait  10`
  2DC:  		SetConst  *Var0  00000001 
  2EC:  		SetConst  *Var1  005A000E 
      34C:  			ExecWait  DoDeath 
      358:  		Case  ==  .Event:RecoverStatus % 31
      36C:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
      384:  		If  *Var0  ==  00000000 
      394:  			SetConst  *Var0  00000001 
      3A4:  			SetConst  *Var1  00530002 
      3B4:  			ExecWait  DoRecover 
      3C0:  		EndIf
      3C8:  	Case  ==  .Event:ScareAway % 39
      3D4:  		SetConst  *Var0  00000001 
      3E4:  		SetConst  *Var1  00530004 
      3F4:  		SetConst  *Var2  00530007 
      404:  		ExecWait  DoScareAway 
      410:  		Return
      418:  	Case  ==  .Event:BeginAirLift % 3A
      424:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
      43C:  		If  *Var0  ==  00000000 
      44C:  			SetConst  *Var0  00000001 
      45C:  			SetConst  *Var1  00530004 
      46C:  			ExecWait  DoAirLift 
      478:  		Else
      480:  			SetConst  *Var0  00000001 
      490:  			SetConst  *Var1  00530009 
      4A0:  			ExecWait  DoAirLift 
      4AC:  		EndIf
      4B4:  	Case  ==  .Event:BlowAway % 16
      4C0:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
      4D8:  		If  *Var0  ==  00000000 
      4E8:  			Call  GetStatusFlags    ( .Actor:Self *Var0 )
      4FC:  			If  *Var0  !&  ~Flags:StatusFlags:Sleep|Frozen|Fear|Paralyze|Dizzy|Stone|Stop % 35D000
      50C:  				If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
      51C:  					Call  SetActorDispOffset    ( .Actor:Self FFFFFFFF FFFFFFFE 00000000 )
      538:  				Else
      540:  					Call  SetActorDispOffset    ( .Actor:Self FFFFFFFD FFFFFFFB 00000000 )
      55C:  				EndIf
      564:  			EndIf
      56C:  			SetConst  *Var0  00000001 
      57C:  			SetConst  *Var1  00530007 
      58C:  			ExecWait  DoBlowAway 
      598:  		Else
      5A0:  			SetConst  *Var0  00000001 
      5B0:  			SetConst  *Var1  00530009 
      5C0:  			ExecWait  DoBlowAway 
      5CC:  		EndIf
      5D4:  		Return
      5DC:  	Case  ==  .Event:AirLiftFailed % 1F
      5E8:  		Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
      600:  		If  *Var0  ==  00000000 
      610:  			SetConst  *Var0  00000001 
      620:  			SetConst  *Var1  00530002 
      630:  			ExecWait  DoImmune 
      63C:  		Else
      644:  			SetConst  *Var0  00000001 
      654:  			SetConst  *Var1  00530001 
      664:  			ExecWait  DoImmune 
      670:  		EndIf
      678:  	Default
      680:  EndSwitch
            ExecWait $Script_HelveticaCheck
      
            Call  EnableIdleScript  ( .Actor:Self 00000001 )
      69C:  Call  UseIdleAnimation  ( .Actor:Self .True )
      6B0:  Return
      6B8:  End
    }

    #new:Script $Script_HelveticaCheck
    {
        Call  GetStatusFlags    ( .Actor:Self *Var0 )
   20:  If  *Var0  &  ~Flags:StatusFlags:Sleep|Paralyze|Stone|Stop % 351000
   30:  	Return
   38:  EndIf
   40:  Call  GetLastEvent  ( .Actor:Self *Var0 )
   D8:  Switch  *Var0
   E4:  	CaseOR  ==  .Event:Immune % 19
  120:  		ExecWait  $Script_HelveticaImmune
  348:  	EndCaseGroup
  350:  EndSwitch
      Return
      End
    }

    #new:Script $Script_HelveticaImmune
    {
        Call  802535B4  ( 00000000 )
        0:  Call  8026BF48      ( 00000001 )
        10:  Call  UseIdleAnimation  ( .Actor:Self .False )
        24:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
        50:  Switch  *Var0
        5C:  	Case  ==  00000000
        68:  		ExecWait $Script_HelveticaSpeaks
        128:  	Case  ==  00000001
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000002
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  00000003
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000004
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000005
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  00000006
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000007
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000008
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  00000009
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_HelveticaHalfway
                Case  ==  0000000A
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  0000000B
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  0000000C
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  0000000D
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  0000000E
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  0000000F
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000010
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000011
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Bone_Attack_00
                Case  ==  00000012
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000013
        68:  		ExecWait $Script_HelveticaSpeaks
                Case  ==  00000014
        68:  		ExecWait $Script_HelveticaSpeaks
                ExecWait $Script_Final_Attack
        Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
      65C:  		Wait  20`
      668:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
       36C:  	EndCaseGroup
       374:  EndSwitch
             Call  AddActorVar       ( .Actor:Self 00000001 00000001 )
       37C:  Call  UseIdleAnimation  ( .Actor:Self .True )
             Call  SetActorVar ( .Actor:Self 00000002 00000000)
       3A8:  Call  8026BF48  ( 00000000 )
       Call  802535B4  ( 00000001 )
       3B8:  Return
       3C0:  End
    }

    #new:Script $Script_HelveticaSpeaks
    {
                    Call  UseBattleCamPreset    ( 00000013 )
        78:  		Call  SetBattleCamTarget    (  69`  0`  -18` )
        90:  		Call  SetBattleCamZoom      (  340` )
        A0:  		Call  SetBattleCamOffsetZ   (  62` )
        B0:  		Call  MoveBattleCamOver     (  20` )
        C0:  		Call  FreezeBattleCam       ( .True )
        D0:  		Wait  20`
                    SetConst *Var0 00010003
                    Call GetActorVar ( .Actor:Self 00000001 *Var1)
                    Add *Var0 *Var1
        DC:  		Call  ActorSpeak    ( *Var0 .Actor:Self 00000001 00530002 00530002 ) % Nyeah heh hoo hah... Did I just feel a breeze? Was ...
        FC:  		Wait  10`
       108: 		Call  FreezeBattleCam       ( .False )
       118:  		Call  UseBattleCamPreset    ( 00000002 )
                    Return
                    End
    }

    #new:Script $Script_HelveticaHalfway
    {
        DC:  		Call  FadeOutMusic  ( 00000000 000001F4 )
                Call  ActorSpeak    ( 0001001B .Actor:Self 00000001 00530002 00530002 ) % Listen...
                Wait 30`
                Call  ActorSpeak    ( 0001001D .Actor:Self 00000001 00530002 00530002 ) % Huh...
                  SetConst *Var5 0000000A
                ExecWait $Script_Bone_Attack_02
                Call SetActorVar (.Actor:Self 00000003 00000004)
                  Call  SetMusicTrack ( 00000000 .Song:MasterBattle 00000000 00000008 )
                    Return
                    End
    }
    
    #new:Script $Script_8021DAC4_22 {
        0:  Set   *Var0  00000000 
       10:  Label  0
       1C:  Call  SetPartRotation   ( .Actor:Self 00000002 00000000 00000000 *Var0 )
       3C:  Add   *Var0  0000003C 
       4C:  Mod   *Var0  00000168 
       5C:  Wait  1`
       68:  Goto  0
       74:  Return
       7C:  End
    }

    #new:Script $Script_8021DAC4_23 {
      0:  Set   *Var0  00000000 
     10:  Label  0
     1C:  Call  SetPartRotation   ( .Actor:Self 00000003 00000000 00000000 *Var0 )
     3C:  Add   *Var0  0000003C 
     4C:  Mod   *Var0  00000168 
     5C:  Wait  1`
     68:  Goto  0
     74:  Return
     7C:  End
  }
    
    #new:Script $Script_TakeTurn_8021DB48_22 {
      Call GetActorVar   ( .Actor:Self 00000001 *Var0 )
      If *Var0 == 00000063
        Goto 1
      EndIf
        0:  Call  UseIdleAnimation  ( .Actor:Self .False )
       14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
       28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
       3C:  Call  GetBattlePhase    ( *Var0 )
       4C:  If  *Var0  ==  00000001 
       5C:  	Call  UseBattleCamPreset    ( 00000002 )
       6C:  	Call  MoveBattleCamOver     (  1` )
       7C:  EndIf
       D0:  Call  GetActorVar   ( .Actor:Self 00000008 *Var0 )
       E8:  If  *Var0  ==  00000001 
       F8:  	Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
      110:  	Sub   *Var0  00000001 
      120:  	If  *Var0  ==  00000000 
      130:  		Call  PlaySoundAtActor  ( .Actor:Self 000002D4 )
      144:  		Call  SetAnimation      ( .Actor:Self 00000001 00530009 )
      15C:  		Wait  10`
      168:  		Call  PlaySoundAtActor  ( .Actor:Self 000002D3 )
      17C:  		Call  SetAnimation      ( .Actor:Self 00000001 0053000A )
      194:  		Wait  20`
      1A0:  		Call  SetActorVar       ( .Actor:Self 00000008 00000000 )
      1B8:  		Call  SetActorVar       ( .Actor:Self 00000000 00000000 )
      1D0:  		Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021CA20_22 )
      1E8:  		Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021CA84_22 )
      200:  		Call  SetStatusTable    ( .Actor:Self $StatusTable_8021CABC_22 )
      214:  		Call  SetPartFlagBits   ( .Actor:Self 00000001 00002000 .False )
      230:  		Call  SetTargetOffset   ( .Actor:Self 00000001  -8`  30` )
      24C:  		Call  8027D4C8  ( FFFFFF81 00000001 FFFFFFFF FFFFFFF6 )
      268:  		Call  GetEnemyMaxHP     ( .Actor:Self *Var0 )
      27C:  		Call  SetEnemyHP        ( .Actor:Self *Var0 )
      290:  	Else
      298:  		Call  PlaySoundAtActor  ( .Actor:Self 000002D4 )
      2AC:  		Call  SetAnimation      ( .Actor:Self 00000001 00530009 )
      2C4:  		Wait  10`
      2D0:  		Call  SetActorVar       ( .Actor:Self 00000000 *Var0 )
      2E8:  	EndIf
      2F0:  	Call  EnableIdleScript  ( .Actor:Self 00000001 )
      304:  	Call  UseIdleAnimation  ( .Actor:Self .True )
      318:  	Return
      320:  EndIf
            Call GetActorVar ( .Actor:Self 00000001 *Var0 )
            Switch *Var0
            Case >= 00000063
              Return
            Case >= 00000013
              ExecWait $Script_Bone_Attack_00
            Case >= 00000011
              ExecWait $Script_Bone_Attack_01
            Case >= 0000000F
              ExecWait $Script_Skull_Attack_00
            Case >= 0000000D
              ExecWait $Script_Bone_Attack_00
            Case >= 0000000B
              ExecWait $Script_Bone_Attack_01
            Case >= 00000009
              ExecWait $Script_Skull_Attack_00
            Case >= 00000007
              ExecWait $Script_Bone_Attack_00
              Case >= 00000005
                ExecWait $Script_Bone_Attack_01
              Case >= 00000003
                ExecWait $Script_Skull_Attack_00
              Default
                Call SetActorVar ( .Actor:Self 00000003 00000003)
                ExecWait $Script_Bone_Attack_02
              
            EndSwitch
      910:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
      924:  Call  UseIdleAnimation  ( .Actor:Self .True )
            Label 1
      938:  Return
      940:  End
    }

    #new:Script $Script_Bone_Attack_00 {
      328:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
            Call  SetAnimation  ( .Actor:Self 00000001 00530005 )
      340:  Wait  15`
      34C:  Call  SetAnimation  ( .Actor:Self 00000001 00530006 )
      364:  Thread
      36C:  	Wait  8`
      378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530002 )
      390:  EndThread
      3A4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
      3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
      3C8:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
      3E8:  Else
      3F0:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
      410:  EndIf
      418:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
      43C:  Switch  *Var0 
      448:  	CaseOR  ==  .HitResult:Miss % 6
      454:  	CaseOR  ==  .HitResult:Lucky % 5
      460:  		Set   *VarF  *Var0 
      470:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
      48C:  		Add   *Var1  00000014 
      49C:  		Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
      4BC:  		Wait  1`
      4C8:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
      4E4:  		Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
      4FC:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
      51C:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
      53C:  		Exec  $Script_8021DAC4_22 *VarA 
      54C:  		Call  SetGoalToTarget   ( .Actor:Self )
      55C:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
      578:  		Sub   *Var0  00000064 
      588:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[12.0] )
      5A0:  		Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
      5C4:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
      5E0:  		Kill  *VarA 
      5EC:  		If  *VarF  ==  00000005 
      5FC:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
      620:  		EndIf
      628:  		Wait  15`
      634:  		Call  YieldTurn ( )
      640:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
      65C:  		Wait  20`
      668:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
      680:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
      694:  		Call  UseIdleAnimation      ( .Actor:Self .True )
      6A8:  		Return
      6B0:  	EndCaseGroup
      6B8:  EndSwitch
      6C0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
      6DC:  Add   *Var1  00000014 
      6EC:  Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
      70C:  Wait  1`
      718:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
      734:  Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
      74C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
      76C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
      78C:  Exec  $Script_8021DAC4_22 *VarA 
      79C:  Call  SetGoalToTarget   ( .Actor:Self )
      7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
      7C8:  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[12.0] )
      7E0:  Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
      804:  Wait  2`
            Call GetActorVar ( .Actor:Self 00000003 *Var5 )
      810:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 ~DebuffType:Poison:3:100` *Var5 00000020 )
      838:  Switch  *Var0 
      844:  	CaseOR  ==  .HitResult:Hit % 0
      850:  	CaseOR  ==  .HitResult:QuakeImmune % 2
      85C:  		Call  GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
      87C:  		Sub   *Var0  00000064 
      88C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
      8A4:  		Call  JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
      8CC:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
      8E8:  		Kill  *VarA 
      8F4:  		Call  YieldTurn ( )
      900:  	EndCaseGroup
      908:  EndSwitch
     74:  Return
     7C:  End
  }

  #new:Script $Script_Skull_Attack_00 {
    328:  Call  SetAnimation  ( .Actor:Self 00000001 00530011 )
    340:  Wait  15`
    34C:  Call  SetAnimation  ( .Actor:Self 00000001 00530012 )
    364:  Thread
    36C:  	Wait  8`
    378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530010 )
    390:  EndThread
    3A4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
    3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
    3C8:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
    3E8:  Else
    3F0:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    410:  EndIf
    418:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense 00000000 00000001 00000010 )
    43C:  Switch  *Var0 
    448:  	CaseOR  ==  .HitResult:Miss % 6
    454:  	CaseOR  ==  .HitResult:Lucky % 5
    460:  		Set   *VarF  *Var0 
    470:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
    48C:  		Add   *Var1  00000014 
    49C:  		Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
    4BC:  		Wait  1`
    4C8:  		Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
    4E4:  		Call  PlaySoundAtPart   ( .Actor:Self 00000003 000002D1 )
    4FC:  		Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Walk 00000000 00000000 )
    51C:  		Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Jump 00000000 00000000 )
    54C:  		Call  SetGoalToTarget   ( .Actor:Self )
    55C:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
    578:  		Sub   *Var0  00000064 
    588:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[12.0] )
    5A0:  		Call  RunPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 .False )
    5C4:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
    5EC:  		If  *VarF  ==  00000005 
    5FC:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
    620:  		EndIf
    628:  		Wait  15`
              Call  AddActorDecoration    ( .Actor:Self 00000003 00000000 .Decoration:Sweat )
              Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
              Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[16.0] )
    5A0:  		Call  RunPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 .False )
    634:  		Call  YieldTurn ( )
    65C:  		Wait  20`
    668:  		Call  RemoveActorDecoration ( .Actor:Self 00000003 00000000 )
    680:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
    694:  		Call  UseIdleAnimation      ( .Actor:Self .True )
    6A8:  		Return
    6B0:  	EndCaseGroup
    6B8:  EndSwitch
            Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
      6DC:  Add   *Var1  00000014 
      6EC:  Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
      70C:  Wait  1`
      718:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
      734:  Call  PlaySoundAtPart   ( .Actor:Self 00000003 000002D1 )
      74C:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Walk 00000000 00000000 )
      76C:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Jump 00000000 00000000 )
      79C:  Call  SetGoalToTarget   ( .Actor:Self )
      7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
      7C8:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[12.0] )
      7E0:  Call  RunPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 .False )
      804:  Wait  2`
    6C0:  Call  GetStatusFlags    ( .Actor:Player *Var1 )
    778:  If  *Var1  &  ~Flags:StatusFlags:Stone % 100000
    788:  	Wait  10`
    794:  	Loop  00000002 
    7A0:  		Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
    7B4:  		Call  SetAnimation  ( .Actor:Self 00000003 00530014 )
    7CC:  		Wait  21`
    7D8:  		Call  SetAnimation  ( .Actor:Self 00000003 00530013 )
    7F0:  		Call  SetActorRotation  ( .Actor:Self 00000003 00000000 0000014A )
    80C:  		Call  PlaySoundAtActor  ( .Actor:Self 000003E0 )
    820:  		Call  SetActorDispOffset    ( .Actor:Self FFFFFFFD FFFFFFFE 00000000 )
    83C:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    858:  		Wait  1`
    864:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
    880:  		Wait  1`
    88C:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
    8A8:  		Wait  1`
    8B4:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
    8D0:  		Wait  1`
    8DC:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.7] *Fixed[1.5] *Fixed[1.0] )
    8F8:  		Wait  2`
    904:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.6] *Fixed[1.6] *Fixed[1.0] )
    920:  		Wait  10`
    92C:  		Wait  2`
              Call GetActorVar ( .Actor:Self 00000003 *Var5 )
              Sub *Var5 00000001
    938:  		Call  EnemyDamageTarget ( .Actor:Self *VarA ~Flags:DamageType:IgnoreDefense 00000000 00000000 *Var5 00000040 )
    960:  		Call  SetActorRotation  ( .Actor:Self 00000003 00000000 00000000 )
    97C:  		Call  SetActorDispOffset    ( .Actor:Self 00000003 00000008 00000000 )
    998:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    9B4:  		Call  SetAnimation  ( .Actor:Self 00000003 00530013 )
    9CC:  		Wait  30`
    9D8:  	EndLoop
    9E0:  Else
    9E8:  	Call  ShowMessageBox    ( 00000031 00007FFF )
    9FC:  	Call  802694A4  ( 00000003 )
    A0C:  	Call  LoadActionCommand ( .ActionCommand:StopLeech )
    A1C:  	Call  802A9000 ( )
    A28:  	Call  SetupMashMeter    ( 00000001 00000017 00000000 00000000 00000000 00000000 )
    A4C:  	Wait  10`
    A58:  	Call  SetBattleFlagBits ( 00004000 .False )
    A6C:  	Call  802A9110  ( 00000000 00007FFF 00000003 )
    A84:  	Set   *VarD  00000000 
    A94:  	Loop  00000005 
    AA0:  		Call  UseIdleAnimation  ( .Actor:Player .False )
    AB4:  		Call  SetAnimation      ( .Actor:Player 00000000 0003000C )
    ACC:  		Call  PlaySoundAtPart  ( .Actor:Self 00000003 000003E0 )
    AE0:  		Call  SetAnimation      ( .Actor:Self 00000003 00530014 )
    AF8:  		Set   *Flag[00]  .False 
    B08:  		Loop  00000015 
    B14:  			Call  GetActionSuccessCopy  ( *Var1 )
    B24:  			If  *Var1  ==  00000001 
    B34:  				Set   *Flag[00]  .True 
    B44:  				BreakLoop
    B4C:  			EndIf
    B54:  			Wait  1`
    B60:  		EndLoop
    B68:  		If  *Flag[00]  ==  .True 
    B78:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    B8C:  			BreakLoop
    B94:  		EndIf
    B9C:  		Call  SetAnimation      ( .Actor:Self 00000003 00530014 )
    BB4:  		Call  SetPartRotation  ( .Actor:Self 00000003 00000003 00000000 0000014A )
    BD0:  		Call  PlaySoundAtPart  ( .Actor:Self 00000003 000003E0 )
    C00:  		Call  SetPartScale     ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
    C1C:  		Set   *Flag[00]  .False 
    C2C:  		Loop  00000001 
    C38:  			Call  GetActionSuccessCopy  ( *Var1 )
    C48:  			If  *Var1  ==  00000001 
    C58:  				Set   *Flag[00]  .True 
    C68:  				BreakLoop
    C70:  			EndIf
    C78:  			Wait  1`
    C84:  		EndLoop
    C8C:  		If  *Flag[00]  ==  .True 
    C9C:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    CB0:  			BreakLoop
    CB8:  		EndIf
    CC0:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.9] *Fixed[1.2] *Fixed[1.0] )
    CDC:  		Set   *Flag[00]  .False 
    CEC:  		Loop  00000001 
    CF8:  			Call  GetActionSuccessCopy  ( *Var1 )
    D08:  			If  *Var1  ==  00000001 
    D18:  				Set   *Flag[00]  .True 
    D28:  				BreakLoop
    D30:  			EndIf
    D38:  			Wait  1`
    D44:  		EndLoop
    D4C:  		If  *Flag[00]  ==  .True 
    D5C:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    D70:  			BreakLoop
    D78:  		EndIf
    D80:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.8] *Fixed[1.3] *Fixed[1.0] )
    D9C:  		Set   *Flag[00]  .False 
    DAC:  		Loop  00000001 
    DB8:  			Call  GetActionSuccessCopy  ( *Var1 )
    DC8:  			If  *Var1  ==  00000001 
    DD8:  				Set   *Flag[00]  .True 
    DE8:  				BreakLoop
    DF0:  			EndIf
    DF8:  			Wait  1`
    E04:  		EndLoop
    E0C:  		If  *Flag[00]  ==  .True 
    E1C:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    E30:  			BreakLoop
    E38:  		EndIf
    E40:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.7] *Fixed[1.4] *Fixed[1.0] )
    E5C:  		Set   *Flag[00]  .False 
    E6C:  		Loop  00000001 
    E78:  			Call  GetActionSuccessCopy  ( *Var1 )
    E88:  			If  *Var1  ==  00000001 
    E98:  				Set   *Flag[00]  .True 
    EA8:  				BreakLoop
    EB0:  			EndIf
    EB8:  			Wait  1`
    EC4:  		EndLoop
    ECC:  		If  *Flag[00]  ==  .True 
    EDC:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    EF0:  			BreakLoop
    EF8:  		EndIf
    F00:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.7] *Fixed[1.5] *Fixed[1.0] )
    F1C:  		Set   *Flag[00]  .False 
    F2C:  		Loop  00000002 
    F38:  			Call  GetActionSuccessCopy  ( *Var1 )
    F48:  			If  *Var1  ==  00000001 
    F58:  				Set   *Flag[00]  .True 
    F68:  				BreakLoop
    F70:  			EndIf
    F78:  			Wait  1`
    F84:  		EndLoop
    F8C:  		If  *Flag[00]  ==  .True 
    F9C:  			Call  UseIdleAnimation  ( .Actor:Player .True )
    FB0:  			BreakLoop
    FB8:  		EndIf
    FC0:  		Call  SetPartScale ( .Actor:Self 00000003 *Fixed[0.6] *Fixed[1.6] *Fixed[1.0] )
    FDC:  		Set   *Flag[00]  .False 
    FEC:  		Loop  0000000A 
    FF8:  			Call  GetActionSuccessCopy  ( *Var1 )
   1008:  			If  *Var1  ==  00000001 
   1018:  				Set   *Flag[00]  .True 
   1028:  				BreakLoop
   1030:  			EndIf
   1038:  			Wait  1`
   1044:  		EndLoop
   104C:  		If  *Flag[00]  ==  .True 
   105C:  			Call  UseIdleAnimation  ( .Actor:Player .True )
   1070:  			BreakLoop
   1078:  		EndIf
   1080:  		Set   *Flag[00]  .False 
   1090:  		Loop  00000002 
   109C:  			Call  GetActionSuccessCopy  ( *Var1 )
   10AC:  			If  *Var1  ==  00000001 
   10BC:  				Set   *Flag[00]  .True 
   10CC:  				BreakLoop
   10D4:  			EndIf
   10DC:  			Wait  1`
   10E8:  		EndLoop
   10F0:  		If  *Flag[00]  ==  .True 
   1100:  			Call  UseIdleAnimation  ( .Actor:Player .True )
   1114:  			BreakLoop
   111C:  		EndIf
   1124:  		Call  UseIdleAnimation  ( .Actor:Player .True )
              Call GetActorVar ( .Actor:Self 00000003 *Var5 )
              Sub *Var5 00000001
   1138:  		Call  EnemyDamageTarget ( .Actor:Self *VarA ~Flags:DamageType:Unblockable|IgnoreDefense 00000000 00000000 *Var5 00000040 )
   1160:  		Call  GetLastDamage     ( .Actor:Player *Var3 )
   1174:  		If  *Var3  !=  00000000 
   1184:  			Call  PlaySoundAtPart  ( .Actor:Self 00000003 0000206D )
   1198:  			Call  PlaySoundAtPart  ( .Actor:Self 00000003 00000214 )
   11AC:  			Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
   11C8:  			Add   *Var1  0000000A 
   11D8:  			Call  $Function_802181A0_14 ( *Var0 *Var1 *Var2 *Var3 )
   11F4:  			Thread
   11FC:  				Wait  15`
   1208:  				Call  PlaySoundAtPart      ( .Actor:Self 00000003 0000025C )
   121C:  				Call  $Function_80218254_14 ( *Var0 *Var1 *Var2 *Var3 )
   1238:  			EndThread
   1240:  			Add   *Var0  00000014 
   1250:  			Add   *Var1  00000014 
   1260:  			Call  PlayEffect    ( ~FX:Recover:HP *Var0 *Var1 *Var2 *Var3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
   12A4:  			Call  GetActorHP    ( .Actor:Self *Var0 )
   12B8:  			Add   *Var0  *Var3 
   12C8:  			Call  SetEnemyHP    ( .Actor:Self *Var0 )
   12DC:  		Else
   12E4:  			Add   *VarD  00000001 
   12F4:  			If  *VarD  >  00000001 
   1304:  				Call  80269470 ( )
   1310:  				BreakLoop
   1318:  			EndIf
   1320:  		EndIf
   1328:  		Call  SetPartRotation  ( .Actor:Self 00000003 00000000 00000000 00000000 )
   1360:  		Call  SetPartScale     ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   137C:  		Call  SetAnimation      ( .Actor:Self 00000003 00530013 )
   1394:  		Call  GetPlayerHP       ( *Var1 )
   13A4:  		If  *Var1  ==  00000000 
   13B4:  			Call  80269470 ( )
   13C0:  			BreakLoop
   13C8:  		EndIf
   13D0:  		Set   *Flag[00]  .False 
   13E0:  		Loop  00000023 
   13EC:  			Call  GetActionSuccessCopy  ( *Var1 )
   13FC:  			If  *Var1  ==  00000001 
   140C:  				Set   *Flag[00]  .True 
   141C:  				BreakLoop
   1424:  			EndIf
   142C:  			Wait  1`
   1438:  		EndLoop
   1440:  		If  *Flag[00]  ==  .True 
   1450:  			BreakLoop
   1458:  		EndIf
   1460:  	EndLoop
   1468:  	Call  80269470 ( )
   1474:  	Call  SetPartRotation  ( .Actor:Self 00000003 00000000 00000000 00000000 )
   14AC:  	Call  SetPartScale     ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   14C8:  	Call  SetAnimation      ( .Actor:Self 00000003 00530014 )
   14E0:  EndIf
   151C:  Call  UseBattleCamPreset    ( 00000002 )
   152C:  Wait  2`
   16E4:  Call  SetPartScale     ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   1700:  Call  GetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
   1758:  Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
   1774:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[12.0] )
   7E0:   Call  RunPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 .False )
          Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
   1978:  Wait  5`
   1984:  Call  YieldTurn ( )
   74:  Return
   7C:  End
}

#new:Script $Script_Bone_Attack_01 {
  328:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
        Call  SetAnimation  ( .Actor:Self 00000001 00530005 )
  340:  Wait  15`
  34C:  Call  SetAnimation  ( .Actor:Self 00000001 00530006 )
  364:  Thread
  36C:  	Wait  8`
  378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530002 )
  390:  EndThread
  3A4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  3C8:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[0.8] *Fixed[0.8] *Fixed[0.8] )
  3E8:  Else
  3F0:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[3.0] *Fixed[3.0] *Fixed[3.0] )
  410:  EndIf
  418:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  43C:  Switch  *Var0 
  448:  	CaseOR  ==  .HitResult:Miss % 6
  454:  	CaseOR  ==  .HitResult:Lucky % 5
  460:  		Set   *VarF  *Var0 
  470:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  48C:  		Add   *Var1  00000014 
  49C:  		Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  4BC:  		Wait  1`
  4C8:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
  4E4:  		Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
  4FC:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
  51C:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
  53C:  		Exec  $Script_8021DAC4_22 *VarA 
  54C:  		Call  SetGoalToTarget   ( .Actor:Self )
  55C:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  578:  		Sub   *Var0  00000064 
  588:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[8.0] )
  5A0:  		Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  5C4:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  5E0:  		Kill  *VarA 
  5EC:  		If  *VarF  ==  00000005 
  5FC:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  620:  		EndIf
  628:  		Wait  15`
  634:  		Call  YieldTurn ( )
  640:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  65C:  		Wait  20`
  668:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  680:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
  694:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  6A8:  		Return
  6B0:  	EndCaseGroup
  6B8:  EndSwitch
  6C0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  6DC:  Add   *Var1  00000014 
  6EC:  Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  70C:  Wait  1`
  718:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
  734:  Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
  74C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
  76C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
  78C:  Exec  $Script_8021DAC4_22 *VarA 
  79C:  Call  SetGoalToTarget   ( .Actor:Self )
  7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
        Div *Var0 00000003
  7C8:  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[1.0] )
  7E0:  Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  804:  Wait  2`
  810:  
        Call  SetTargetActor    ( .Actor:Self .Actor:Player )
        Call  SetAnimation  ( .Actor:Self 00000001 00530011 )
    340:  Wait  15`
    34C:  Call  SetAnimation  ( .Actor:Self 00000001 00530012 )
    364:  Thread
    36C:  	Wait  8`
    378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530010 )
    390:  EndThread
        Call  GetStatusFlags    ( .Actor:Self *Var0 )
  3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  3C8:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
  3E8:  Else
  3F0:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  410:  EndIf
  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  6DC:  Add   *Var1  00000014 
  6EC:  Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  70C:  Wait  1`
  718:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  734:  Call  PlaySoundAtPart   ( .Actor:Self 00000003 000002D1 )
  74C:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Walk 00000000 00000000 )
  76C:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Jump 00000000 00000000 )
  79C:  Call  SetGoalToTarget   ( .Actor:Self )
  7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  7C8:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[14.0] )
  7E0:  Call  RunPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2 .False )
  804:  Wait  2`
  Call GetActorVar ( .Actor:Self 00000003 *Var5 )
  Sub *Var5 00000001
  810:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 *Var5 00000020 )
  838:  Switch  *Var0 
  844:  	CaseOR  ==  .HitResult:Hit % 0
  850:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  85C:  		Call  GetPartOffset     ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  87C:  		Sub   *Var0  00000064 
  88C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.7] )
  8A4:  		Call  JumpPartTo        ( .Actor:Self 00000003 *Var0  0` *Var2  30` .True )
  8CC:  		Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  900:  	EndCaseGroup
  908:  EndSwitch
  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  Call  SetGoalToTarget   ( .Actor:Self )
  7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  Add *Var0 76
  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[3.0] )
  Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  Sub *Var0 76
  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[6.0] )
  Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  Call GetActorVar ( .Actor:Self 00000003 *Var5 )
  Add *Var5 00000001
  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 *Var5 00000020 )
  838:  Switch  *Var0 
  844:  	CaseOR  ==  .HitResult:Hit % 0
  850:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  85C:  		Call  GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  87C:  		Sub   *Var0  00000064 
  88C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
  8A4:  		Call  JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
  8CC:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  8E8:  		Kill  *VarA
  900:  	EndCaseGroup
  908:  EndSwitch
  Call  YieldTurn ( )
 74:  Return
 7C:  End
}

#new:Script $Script_Bone_Attack_02 {
  328:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
        Thread
  36C:  	Wait  8`
  378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530007 )
  390:  EndThread
  3A4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  3C8:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[4.4] *Fixed[4.4] *Fixed[4.4] )
  3E8:  Else
  3F0:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[8.0] *Fixed[8.0] *Fixed[8.0] )
  410:  EndIf
  418:  Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
  6DC:  Add   *Var1  00000214 
  6EC:  Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  Call  SetPartRotation  ( .Actor:Self 00000002 00000000 00000000 0000005A )
  70C:  Wait  10`
  718:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
  734:  Call  PlaySoundAtPart   ( .Actor:Self 00000002 000020EB )
  74C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
  76C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
  79C:  Call  SetGoalToTarget   ( .Actor:Self )
  7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  7C8:  Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.3] )
  8A4:  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[2.0] )
  164:  	Call  FallPartTo        ( .Actor:Self 00000002  *Var0 *Var1 *Var2  20` )
  804:  Wait  2`
  Call  PlayEffect    ( ~FX:ShockWave:LargeWhite *Var0 00000000 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  810:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 *Var5 00000020 )
  838:  Switch  *Var0 
  844:  	CaseOR  ==  .HitResult:Hit % 0
  850:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  85C:  		Call  GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  87C:  		Sub   *Var0  00000064 
  88C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
  8A4:  		Call  JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
  8CC:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  8F4:  		Call  YieldTurn ( )
  900:  	EndCaseGroup
  908:  EndSwitch
 74:  Return
 7C:  End
}

#new:Script $Script_Final_Attack {
  328:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
        Call  SetAnimation  ( .Actor:Self 00000001 00530005 )
  340:  Wait  15`
  34C:  Call  SetAnimation  ( .Actor:Self 00000001 00530006 )
  364:  Thread
  36C:  	Wait  8`
  378:  	Call  SetAnimation  ( .Actor:Self 00000001 00530002 )
  390:  EndThread
  3A4:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
  3B8:  If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  3C8:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
  3E8:  Else
  3F0:  	Call  SetPartScale  ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  410:  EndIf
  418:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  43C:  Switch  *Var0 
  448:  	CaseOR  ==  .HitResult:Miss % 6
  454:  	CaseOR  ==  .HitResult:Lucky % 5
  460:  		Set   *VarF  *Var0 
  470:  		Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  48C:  		Add   *Var1  00000014 
  49C:  		Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  4BC:  		Wait  1`
  4C8:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
  4E4:  		Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
  4FC:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
  51C:  		Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
  53C:  		Exec  $Script_8021DAC4_22 *VarA 
  54C:  		Call  SetGoalToTarget   ( .Actor:Self )
  55C:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  578:  		Sub   *Var0  00000064 
  588:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[12.0] )
  5A0:  		Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  5C4:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  5E0:  		Kill  *VarA 
  5EC:  		If  *VarF  ==  00000005 
  5FC:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  620:  		EndIf
  628:  		Wait  15`
  634:  		Goto 0
  640:  		Call  AddActorDecoration    ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  65C:  		Wait  20`
  668:  		Call  RemoveActorDecoration ( .Actor:Self 00000001 00000000 )
  680:  		Call  EnableIdleScript      ( .Actor:Self 00000001 )
  694:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  6A8:  		Return
  6B0:  	EndCaseGroup
  6B8:  EndSwitch
  6C0:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  6DC:  Add   *Var1  00000014 
  6EC:  Call  SetPartPos        ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  70C:  Wait  1`
  718:  Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .False )
  734:  Call  PlaySoundAtPart   ( .Actor:Self 00000002 000002D1 )
  74C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Walk 00000000 00000000 )
  76C:  Call  SetPartSounds     ( .Actor:Self 00000002 .ActorSound:Jump 00000000 00000000 )
  78C:  Exec  $Script_8021DAC4_22 *VarA 
  79C:  Call  SetGoalToTarget   ( .Actor:Self )
  7AC:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  7C8:  Call  SetPartMoveSpeed  ( .Actor:Self 00000002 *Fixed[12.0] )
  7E0:  Call  RunPartTo ( .Actor:Self 00000002 *Var0 *Var1 *Var2 .False )
  804:  Wait  2`
        Call GetActorVar ( .Actor:Self 00000003 *Var5 )
  810:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 *Var5 00000020 )
  838:  Switch  *Var0 
  844:  	CaseOR  ==  .HitResult:Hit % 0
  850:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  85C:  		Call  GetPartOffset     ( .Actor:Self 00000002 *Var0 *Var1 *Var2 )
  87C:  		Sub   *Var0  00000064 
  88C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.7] )
  8A4:  		Call  JumpPartTo        ( .Actor:Self 00000002 *Var0  0` *Var2  30` .True )
  8CC:  		Call  SetPartFlagBits   ( .Actor:Self 00000002 00000001 .True )
  8E8:  		Kill  *VarA 
  8F4:  		Goto 0
  900:  	EndCaseGroup
  908:  EndSwitch
      Label 0
      Call  FadeOutMusic  ( 00000000 000001F4 )
      Wait 30`
      Call  ActorSpeak    ( 0001001F .Actor:Self 00000001 00530002 00530002 ) % Listen...
      Wait 100`
      Call  ActorSpeak    ( 00010020 .Actor:Self 00000001 00530002 00530002 ) % Listen...
      Wait 200`
      Call  ActorSpeak    ( 00010021 .Actor:Self 00000001 00530002 00530002 ) % Listen...
      Wait 300`
      Call  SetAnimation      ( .Actor:Self 00000001 00530016 )
      Wait 300`
      Call  SetAnimation      ( .Actor:Self 00000001 00530017 )
      Wait 300`
      Call  SetAnimation      ( .Actor:Self 00000001 00530015 )
      Wait 200`
      Call  SetAnimation      ( .Actor:Self 00000001 0053000E )
      Wait 50`
      Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8021CA6C_22 )
      Call SetActorVar  ( .Actor:Self 00000001 00000063 )
      Call  SetDefenseTable   ( .Actor:Self 00000001 $DefenseTable_8021CAA0_22 )
      Call YieldTurn ( )
 74:  Return
 7C:  End
}

@ $FormationTable {
  $SJIS_80220FD8 00000001 $Formation_00 $Stage_8022066C 00000000
  $SJIS_80220FCC 00000002 $Formation_01 $Stage_8022066C 00000000
  $SJIS_80220FC0 00000002 $Formation_02 $Stage_8022066C 00000000
  $SJIS_80220FA8 00000002 $Formation_03 $Stage_8022066C 00000000
  $SJIS_80220F9C 00000004 $Formation_04 $Stage_8022066C 00000000
  $SJIS_80220F84 00000002 $Formation_05 $Stage_8022066C 00000000
  $SJIS_80220F58 00000004 $Formation_06 $Stage_8022066C 00000000
  $SJIS_80220F48 00000001 $Formation_07 $Stage_8022066C 00000000
  $SJIS_80220F38 00000002 $Formation_08 $Stage_8022066C 00000000
  $SJIS_80220F28 00000003 $Formation_09 $Stage_8022066C 00000000
  $SJIS_80220F18 00000001 $Formation_0A $Stage_8022066C 00000000
  $SJIS_80220F00 00000002 $Formation_0B $Stage_8022066C 00000000
  00000000 00000000 00000000 00000000 00000000
}

@ $Formation_00
{
	$22_DryBones 00000002 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_01
{
	$EB_LittleHorn 00000001 0000000A 00000000 00000000 00000000 00000000
	$EB_LittleHorn 00000002 00000009 00000000 00000000 00000000 00000000
}

@ $Formation_02
{
	$EC_Slime 00000001 0000000A 00000000 00000000 00000000 00000000
	$EC_Slime 00000002 00000009 00000000 00000000 00000000 00000000
}


#new:Function $Function_802181A0_14 {
  0:  ADDIU     SP, SP, FFD8
  4:  SW        S1, 14 (SP)
  8:  COPY      S1, A0
  C:  SW        RA, 20 (SP)
 10:  SW        S3, 1C (SP)
 14:  SW        S2, 18 (SP)
 18:  SW        S0, 10 (SP)
 1C:  LW        S0, C (S1)
 20:  LW        A1, 0 (S0)
 24:  JAL       ~Func:get_variable
 28:  ADDIU     S0, S0, 4
 2C:  LW        A1, 0 (S0)
 30:  ADDIU     S0, S0, 4
 34:  COPY      A0, S1
 38:  JAL       ~Func:get_variable
 3C:  COPY      S3, V0
 40:  LW        A1, 0 (S0)
 44:  ADDIU     S0, S0, 4
 48:  COPY      A0, S1
 4C:  JAL       ~Func:get_variable
 50:  COPY      S2, V0
 54:  COPY      A0, S1
 58:  LW        A1, 0 (S0)
 5C:  JAL       ~Func:get_variable
 60:  COPY      S0, V0
 64:  MTC1      S3, F12
 68:  NOP
 6C:  CVT.S.W   F12, F12
 70:  MTC1      S2, F14
 74:  NOP
 78:  CVT.S.W   F14, F14
 7C:  MTC1      S0, F0
 80:  NOP
 84:  CVT.S.W   F0, F0
 88:  MFC1      A2, F0
 8C:  JAL       802D7460
 90:  COPY      A3, V0
 94:  LW        RA, 20 (SP)
 98:  LW        S3, 1C (SP)
 9C:  LW        S2, 18 (SP)
 A0:  LW        S1, 14 (SP)
 A4:  LW        S0, 10 (SP)
 A8:  LI        V0, 2
 AC:  JR        RA
 B0:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218254_14 {
  0:  ADDIU     SP, SP, FFD8
  4:  SW        S1, 14 (SP)
  8:  COPY      S1, A0
  C:  SW        RA, 20 (SP)
 10:  SW        S3, 1C (SP)
 14:  SW        S2, 18 (SP)
 18:  SW        S0, 10 (SP)
 1C:  LW        S0, C (S1)
 20:  LW        A1, 0 (S0)
 24:  JAL       ~Func:get_variable
 28:  ADDIU     S0, S0, 4
 2C:  LW        A1, 0 (S0)
 30:  ADDIU     S0, S0, 4
 34:  COPY      A0, S1
 38:  JAL       ~Func:get_variable
 3C:  COPY      S3, V0
 40:  LW        A1, 0 (S0)
 44:  ADDIU     S0, S0, 4
 48:  COPY      A0, S1
 4C:  JAL       ~Func:get_variable
 50:  COPY      S2, V0
 54:  COPY      A0, S1
 58:  LW        A1, 0 (S0)
 5C:  JAL       ~Func:get_variable
 60:  COPY      S0, V0
 64:  MTC1      S3, F12
 68:  NOP
 6C:  CVT.S.W   F12, F12
 70:  MTC1      S2, F14
 74:  NOP
 78:  CVT.S.W   F14, F14
 7C:  MTC1      S0, F0
 80:  NOP
 84:  CVT.S.W   F0, F0
 88:  MFC1      A2, F0
 8C:  JAL       802D74C0
 90:  COPY      A3, V0
 94:  LW        RA, 20 (SP)
 98:  LW        S3, 1C (SP)
 9C:  LW        S2, 18 (SP)
 A0:  LW        S1, 14 (SP)
 A4:  LW        S0, 10 (SP)
 A8:  LI        V0, 2
 AC:  JR        RA
 B0:  ADDIU     SP, SP, 28
}
